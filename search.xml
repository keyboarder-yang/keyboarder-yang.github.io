<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设计模式学习 --- 单例模式</title>
    <url>/2022/05/17/DesignPattern/SingletonPattern/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>Ensure a class has only one instance  and provide a global point of access to it.</p>
<p>确保一个类只有一个实例，并全局提供这个实例。</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li><p>通过类的静态方法（es6）</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre>
<blockquote>
<p>缺点：</p>
<ul>
<li>用户使用这个类的时候必须知道这是一个单例的类，必须主动调用getInstance方法</li>
<li>不能直接通过new 关键字进行创建单例，new出来的实例并不是一个单例</li>
</ul>
</blockquote>
</li>
<li><p>通过构造函数（es6）</p>
<pre class="language-none"><code class="language-none">class Singleton &#123;
    constructor(name) &#123;
        this.name &#x3D; name
        if(!Singleton.instance) &#123;
            &#x2F;&#x2F; 将 this 挂载到单例上
            Singleton.instance &#x3D; this
        &#125;
        return Singleton.instance
    &#125;
    static getInstance()&#123;
        console.log(this.name)
    &#125;
&#125;
const a &#x3D; new Singleton(&#39;zs&#39;)
const b &#x3D; new Singleton(&#39;ls&#39;)
console.log(a &#x3D;&#x3D;&#x3D; b) &#x2F;&#x2F; true</code></pre>

<blockquote>
<p>缺点：</p>
<ul>
<li>不符合设计模式的设计原则 —- 单一职责原则。（共六大设计模式）</li>
<li>单一职责原则：对类来说的，即一个类应该只负责一项职责。（高内聚，低耦合）</li>
</ul>
</blockquote>
</li>
<li><p>通过代理</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">Class2SingletonClass</span><span class="token punctuation">(</span><span class="token parameter">constructor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> SingletonCreator <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>SingletonCreator<span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                SingletonCreator<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> SingletonCreator<span class="token punctuation">.</span>instance
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> SingletonCreator
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>状态存储—-vuex</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 获取对象</span>
    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 存储对象</span>
    <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo学习</title>
    <url>/2022/05/12/Hexo/hexoCommand/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="language-none"><code class="language-none">hexo new TitleName #新建文章TitleName
hexo new page PageName #新建页面PageName---会创建在source目录下
hexo new page --path a&#x2F;b #在source&#x2F;_post下新建目录a,a中新建文章b
hexo generate&#x2F;hexo g #生成静态页面至public目录
hexo server&#x2F;hexo s #开启预览访问端口
hexo deploy&#x2F;hexo d #部署到GitHub
hexo d -g #生成并部署到GitHub
hexo s -g #生产并开启本地服务</code></pre>

<h3 id="上传到github报错"><a href="#上传到github报错" class="headerlink" title="上传到github报错"></a>上传到github报错</h3><blockquote>
<p>fatal: unable to access ‘<a href="https://github.com/.......%E2%80%98">https://github.com/.......‘</a>: OpenSSL SSL_read: Connection was reset<br>原因：服务器的SSL证书没有经过第三方机构的签署，所以才报错<br>解决方法：<code>git config --global http.sslVerify &quot;false&quot;</code> 解除验证</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo命令</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习</title>
    <url>/2022/05/16/DesignPattern/DesignPattern/</url>
    <content><![CDATA[<h4 id="1-什么是设计模式"><a href="#1-什么是设计模式" class="headerlink" title="1. 什么是设计模式"></a>1. 什么是设计模式</h4><blockquote>
<p>设计模式是优秀代码设计经验的总结，具体到某个设计模式的话，就是在特定环境，特定问题的一种优雅的解决方案。</p>
</blockquote>
<h4 id="2-为什么使用设计模式"><a href="#2-为什么使用设计模式" class="headerlink" title="2.为什么使用设计模式"></a>2.为什么使用设计模式</h4><blockquote>
<p>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
</blockquote>
<h4 id="3-设计模式的种类"><a href="#3-设计模式的种类" class="headerlink" title="3.设计模式的种类"></a>3.设计模式的种类</h4><ul>
<li><p>设计模式分为3大类</p>
<ul>
<li><p>创建型模式</p>
<blockquote>
<p>处理对象的创建，根据实际情况使用合适的方式创建对象，解决创建类或者实例化对象时产生的问题</p>
</blockquote>
</li>
<li><p>结构型模式</p>
<blockquote>
<p>通过识别系统中组件间的简单关系来简化系统的设计。解决类或者对象组合在一起时候的问题</p>
</blockquote>
</li>
<li><p>行为型模式</p>
<blockquote>
<p>用于识别对象之间常见的交互模式并加以实现。解决类或者对象之间耦合、职责关系的问题</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="4-前端常用设计模式"><a href="#4-前端常用设计模式" class="headerlink" title="4.前端常用设计模式"></a>4.前端常用设计模式</h4><ul>
<li><p>单例模式</p>
<blockquote>
<p>定义：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</p>
</blockquote>
</li>
<li><p>观察者模式</p>
<blockquote>
<p>定义：观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己</p>
</blockquote>
</li>
<li><p>策略模式</p>
<blockquote>
<p>定义：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p>
</blockquote>
</li>
<li><p>工厂模式</p>
</li>
</ul>
<p>1. </p>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- class</title>
    <url>/2022/05/18/JavaScript/Class/</url>
    <content><![CDATA[<h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><blockquote>
<ol>
<li><p>类中必须有一个constructor构造方法，不写默认会被添加一个空的构造方法</p>
</li>
<li><p>类中constructor构造方法内，this指向 new出来的实例。</p>
</li>
<li><p>类是不存在变量提升的。</p>
</li>
<li><p>class中的取值函数get和存值函数set：类似与object.defineProperty中的get和set。可以实现对属性的拦截</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>类 class</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 闭包</title>
    <url>/2022/05/21/JavaScript/Closure/</url>
    <content><![CDATA[<h4 id="相关知识概要"><a href="#相关知识概要" class="headerlink" title="相关知识概要"></a>相关知识概要</h4><blockquote>
<p>定义：<br>    + 一个函数和它周围状态的引用捆绑在一起的组合。<br>    + 内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。<br>    + 闭包就是一个没有释放资源的栈区。</p>
<p>执行上下文：程序执行时，有自己的执行上下文，执行上下文分为两个阶段：</p>
<ul>
<li>创建阶段：<ul>
<li><strong>作用域链</strong>：当前变量对象 + 所有父级变量对象 &#x3D; 作用域链</li>
<li>变量对象：包括参数、变量、函数声明</li>
<li>this</li>
</ul>
</li>
<li>执行阶段：变量赋值，函数引用等</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- this指向问题</title>
    <url>/2022/05/18/JavaScript/This/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul>
<li>this -&gt; JavaScript 关键字</li>
<li>当前环境执行期上下文对象的一个属性</li>
<li>this在不同的环境、不同作用下，表现不同</li>
</ul>
<h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><blockquote>
<p>this 指向（函数在定义的时候this是不确定的，只有在调用的时候才可以确定this的指向）</p>
<ol>
<li>普通函数中和定时器，内部的this指向全局window（严格模式下，普通函数this指向undefined）</li>
<li>函数作为一个对象的方法，该对象被调用，this指向该对象</li>
<li>构造函数this指向返回的这个对象</li>
<li>箭头函数，内外this一致，绑定最近的一层对象上</li>
</ol>
</blockquote>
<h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><blockquote>
<ol>
<li>箭头函数</li>
<li>let 变量 &#x3D; this</li>
<li>通过call，apply，bind可以改变this的指向，call，apply会立即调用，bind返回一个函数</li>
<li>new实例化一个对象</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>this指向</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义计时器</title>
    <url>/2022/05/13/JavaScript/TimeCount/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>用于实现计时功能(可在callback中接收当前值，并执行相应操作或者结束计时)，接收两个参数 params(Object)和callback;</p>
</blockquote>
<ol>
<li>params: 为一个对象<ul>
<li>startVal: 初始值-默认<code>60</code></li>
<li>endVal: 结束值-默认<code>0</code></li>
<li>valSetp: 步长,正数则正计时,负数倒计时-默认<code>-1</code></li>
<li>timerStep: 周期定时器的时间步长-默认<code>1000</code></li>
</ul>
</li>
<li>callback: 为一个回调函数,接收一个当前值的参数。返回若为<code>true</code>则终止计时。<blockquote>
<p>注意：callback若有返回值（无论什么值）,则endVal会失效</p>
</blockquote>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-none"><code class="language-none">&#x2F;**
 * 描述: 计时器
 * @param &#123;Object&#125; params 配置参数
 * @param &#123;Function&#125; calback 计时器执行时的回调函数
 *&#x2F;
const TimeCount &#x3D; (params, callback) &#x3D;&gt; &#123;
    &#x2F;&#x2F; 设置缺省默认值
    const defaultVal &#x3D; &#123;
        startVal: 60,
        endVal: 0,
        valStep:-1,
        timerStep: 1000,
    &#125;
    &#x2F;&#x2F; 判断当前传入的params是否是一个对象
    let isObject &#x3D; Object.prototype.toString.call(params) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;
    if(!isObject)&#123;
        params &#x3D; Object.assign(&#123;&#125;,defaultVal)
        console.log(&#39;params type is not Object&#39;)
    &#125;else &#123;
        Object.keys(defaultVal).forEach((item) &#x3D;&gt; &#123;
            if(!params.hasOwnProperty(item))&#123;
                params[item] &#x3D; defaultVal[item]
            &#125;
        &#125;)
    &#125;
    &#x2F;&#x2F; 从传入的对象解构出需要的值
    let &#123; startVal,endVal,valStep, timerStep&#125; &#x3D; params;
    let currentVal &#x3D; startVal;
    let timer &#x3D; setInterval(() &#x3D;&gt; &#123;
        currentVal &#x3D; currentVal + valStep;
        let callbackReturn &#x3D; callback(currentVal);
        &#x2F;&#x2F; 判断callback有无返回值和当前的结束值来判断是否结束计时
        if(callbackReturn!&#x3D;&#x3D;undefined)&#123;
            callbackReturn &amp;&amp; clearInterval(timer);
        &#125;else&#123;
            currentVal&#x3D;&#x3D;&#x3D;endVal &amp;&amp; clearInterval(timer);
        &#125;
    &#125;, timerStep)
&#125;</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js 计数器</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 数组遍历</title>
    <url>/2021/06/16/JavaScript/arrayTraversal/</url>
    <content><![CDATA[<h4 id="数组常用遍历方法"><a href="#数组常用遍历方法" class="headerlink" title="数组常用遍历方法"></a>数组常用遍历方法</h4><blockquote>
<p>引用地址：<a href="https://blog.csdn.net/weixin_42733155/article/details/81145334">https://blog.csdn.net/weixin_42733155/article/details/81145334</a></p>
</blockquote>
<hr>
<h5 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach"></a><code>1. forEach</code></h5><blockquote>
<p><code>forEach</code>是最简单、最常用的数组遍历方法，它提供一个回调函数，可用于处理数组的每一个元素，默认没有返回值。回调函数的参数，第一个是处于当前循环的元素，第二个是该元素下标，第三个是数组本身。三个参数均可选。<code>当数组项为原始类型时，forEach不会改变原数组，当数组项为引用类型时，原数组会发生改变.</code></p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基本写法</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>Array</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行操作</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组项为原始类型</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组项为引用类型</span>
arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
    item <span class="token operator">=</span> item <span class="token operator">*</span> item<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
    item<span class="token punctuation">.</span>a <span class="token operator">=</span> item<span class="token punctuation">.</span>a <span class="token operator">*</span> item<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#123;a:1&#125;,&#123;a:4&#125;,&#123;a:9&#125;],原数组发生改变</span></code></pre>



<h5 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a><code>2. map</code></h5><blockquote>
<p><code>map</code> 提供一个回调函数，不改变当前数组，默认返回一个数组。回调参数为当前循环的元素、该元素下标、数组本身。</p>
<blockquote>
<p><code>join()</code>把数组项以特定的字符链接&#x3D;&gt;<code>字符串</code></p>
</blockquote>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>Array</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> item<span class="token operator">*</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2,3,4,5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,4,6,16,25]</span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组项为引用类型</span>
<span class="token keyword">var</span> tem  <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> item<span class="token punctuation">.</span>a
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// tem: [1,4,9]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,4,9</span></code></pre>

<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h5><blockquote>
<p><code>filter</code>，过滤，即对数组元素的一个条件筛选。它提供一个回调函数，参数依次为处于当前循环的元素、该元素下标、数组本身，三者均可选。默认返回一个数组，原数组的元素执行了回调函数之后返回值若为true，则会将这个元素放入返回的数组中。</p>
<blockquote>
<p><code>filter</code>方法不改变原数组，和<code>forEach</code>类似，数组项为引用类型，数组会被改变，原始类型，数组不会被改变</p>
</blockquote>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> item<span class="token operator">*</span>index<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,4,5]</span></code></pre>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 解构赋值(未完结)</title>
    <url>/2022/05/15/JavaScript/deconstruct/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>ES6允许按照一定的模式从数组或者对象中提取值，然后给变量进行赋值，</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>数组的解构赋值</li>
<li>对象的解构赋值</li>
<li>字符串的解构赋值</li>
<li>布尔值的解构赋值</li>
<li>函数参数的解构赋值</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><ol>
<li>解构成功（完全解构和不完全解构）<br>+ 完全解构</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js 解构</tag>
      </tags>
  </entry>
  <entry>
    <title>JsDoc</title>
    <url>/2022/05/12/Others/JsDoc/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote>
<p><code> jsdoc -d ./ xxx.js</code>  #在当前目录生成构建后的文档<br><code> jsdoc -d  xxx.js</code>  #在当前目录生成一个out文件夹</p>
</blockquote>
]]></content>
      <categories>
        <category>JsDoc</category>
      </categories>
      <tags>
        <tag>jsdoc</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个新的git仓库并提交代码，后续代码提交流程</title>
    <url>/2021/08/13/Others/gitCreate/</url>
    <content><![CDATA[<h4 id="第一次创建仓库"><a href="#第一次创建仓库" class="headerlink" title="第一次创建仓库"></a>第一次创建仓库</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">git init
git add <span class="token punctuation">.</span>
git commit <span class="token operator">-</span>m <span class="token string">'first commit'</span>
git remote add origin git地址
git push <span class="token operator">-</span>u origin master</code></pre>

<h4 id="正常拉取流程"><a href="#正常拉取流程" class="headerlink" title="正常拉取流程"></a>正常拉取流程</h4><pre class="language-none"><code class="language-none">git add .&#x2F;&#x2F; 添加所有文件
git commit -m ‘注释’&#x2F;&#x2F; 提交到本地
git remote add origin git地址
git pull origin git地址
git push origin master 推送至远程</code></pre>
<h4 id="遇到的错误以及解决方法"><a href="#遇到的错误以及解决方法" class="headerlink" title="遇到的错误以及解决方法"></a>遇到的错误以及解决方法</h4><ul>
<li><code>fatal: refusing to merge unrelated histories</code></li>
<li>解决方法：<code>git pull origin master --allow-unrelated-histories</code></li>
</ul>
<hr>
<ul>
<li><code>couldn&#39;t find remote ref –allow-unrelated-histories</code></li>
<li>解决方法：<code>git pull --rebase origin master</code></li>
</ul>
<hr>
<ul>
<li><code>src refspec master does not match any</code></li>
<li>解决方法： 当前仓库为空，添加内容后再提交即可</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git仓库创建 代码提交</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket 连接---前端</title>
    <url>/2021/06/21/Others/webSocket/</url>
    <content><![CDATA[<h4 id="WebSocket-连接—前端"><a href="#WebSocket-连接—前端" class="headerlink" title="WebSocket 连接—前端"></a>WebSocket 连接—前端</h4><blockquote>
<p>在线测试： <a href="http://coolaf.com/tool/chattest">http://coolaf.com/tool/chattest</a></p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webSocket.js</span>
<span class="token comment">// websocket 的封装 </span>
<span class="token keyword">let</span> Socket <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">let</span> setIntervalWesocketPush <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token comment">/**
 * 建立websocket连接
 * @param &#123;string&#125; url ws地址
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createSocket</span> <span class="token operator">=</span> <span class="token parameter">url</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Socket <span class="token operator">&amp;&amp;</span> Socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Socket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'建立websocket连接'</span><span class="token punctuation">)</span>
      Socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
      Socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> onopenWS
      Socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> onmessageWS
      Socket<span class="token punctuation">.</span>onerror <span class="token operator">=</span> onerrorWS
      Socket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> oncloseWS
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'websocket已连接'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**打开WS之后发送心跳 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">onopenWS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">sendPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**连接失败重连 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">onerrorWS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>setIntervalWesocketPush<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接失败重连中'</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Socket <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**WS数据接收统一处理 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">onmessageWS</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">'onmessageWS'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> e<span class="token punctuation">.</span>data
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 发送数据但连接未建立时进行处理等待重发
 * @param &#123;any&#125; message 需要发送的数据
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">connecting</span> <span class="token operator">=</span> <span class="token parameter">message</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">connecting</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      Socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 发送数据
 * @param &#123;any&#125; message 需要发送的数据
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sendWSPush</span> <span class="token operator">=</span> <span class="token parameter">message</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> Socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">connecting</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**断开重连 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">oncloseWS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>setIntervalWesocketPush<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'websocket已断开....正在尝试重连'</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Socket <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**发送心跳
 * @param &#123;number&#125; time 心跳间隔毫秒 默认5000
 * @param &#123;string&#125; ping 心跳名称 默认字符串ping
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> sendPing <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> ping <span class="token operator">=</span> <span class="token string">'ping'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>setIntervalWesocketPush<span class="token punctuation">)</span>
  Socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span>
  setIntervalWesocketPush <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    Socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 断开连接</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SocketClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 使用方法
&lt;script&gt;
 	&#x2F;&#x2F; 引入 webSocket.js 文件
    import &#123; createSocket, SocketClose &#125; from &quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;utils&#x2F;webSocket&quot;;
    export default &#123;
      name: &quot;test&quot;,
      data() &#123;
        return &#123;
          path: &quot;ws:&#x2F;&#x2F;82.157.123.54:9010&#x2F;ajaxchattest&quot;,&#x2F;&#x2F; ws 地址
        &#125;;
      &#125;,
      mounted() &#123;
        &#x2F;&#x2F; 实例化
        createSocket(this.path);
        &#x2F;&#x2F; 添加监听，监听onmessage，用来获取ws返回的数据
        this.addEveLis();
      &#125;,
      destroyed() &#123;
        &#x2F;&#x2F; 页面销毁时，移除监听
        window.removeEventListener(&quot;onmessageWS&quot;, this.handleData);
        &#x2F;&#x2F; 关闭websocket连接
        SocketClose();
      &#125;,
      methods: &#123;
        &#x2F;&#x2F; 添加监听事件
        addEveLis() &#123;
          window.addEventListener(&quot;onmessageWS&quot;, this.handleData);
        &#125;,

        &#x2F;&#x2F; 处理接收的数据
        handleData(info) &#123;
          console.log(info.detail);
        &#125;,
      &#125;,
    &#125;;
&lt;&#x2F;script&gt;
	</code></pre>

]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack打包后图片找不到-404</title>
    <url>/2021/06/20/Others/webpack/</url>
    <content><![CDATA[<h4 id="webpack-打包后-图片找不到-–404"><a href="#webpack-打包后-图片找不到-–404" class="headerlink" title="webpack 打包后 图片找不到 –404"></a>webpack 打包后 图片找不到 –404</h4><blockquote>
<p>一. build文件夹下 utils文件中</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">.</span>extract</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> loaders<span class="token punctuation">,</span>
        <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">publicPath</span><span class="token operator">:</span><span class="token string">'../../'</span> <span class="token comment">//此处为新添加的项</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>二. config 文件夹下 index.js 文件</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">assetsPublicPath</span><span class="token operator">:</span> <span class="token string">'./'</span> <span class="token comment">//此处修改</span></code></pre>

<blockquote>
<p>三. 图片路径不要写成绝对路径</p>
</blockquote>
]]></content>
      <categories>
        <category>WebPack</category>
      </categories>
      <tags>
        <tag>webpack 打包</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习 --- render函数</title>
    <url>/2022/05/14/Vue/Render/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol>
<li><p><code>render</code>函数和<code>template</code>的作用一样，用于渲染页面。接收一个参数<code>createElement</code>。</p>
</li>
<li><p><code>createElement</code>参数同样也是一个函数，他接收三个参数，返回一个<code>VNode</code>节点。</p>
<ul>
<li><p>一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 <code>async</code> 异步函数。类型：<code>String | Object | Function</code>。必需。</p>
</li>
<li><p>一个包含模板相关属性的数据对象，你可以在 <code>template </code>中使用这些特性。类型：<code>Object</code>。可选。</p>
</li>
<li><p>子虚拟节点 <code>VNodes</code>，由 <code>createElement() </code>构建而成，也可以使用字符串来生成“文本虚拟节点”。类型：<code>String | Array</code>。可选。</p>
</li>
</ul>
</li>
</ol>
<h4 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h4><ol>
<li><p><a href="https://cn.vuejs.org/v2/guide/render-function.html">官网</a>示例：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 父组件中
&lt;div&gt;
    &lt;RenderVue level&#x3D;&quot;1&quot;&gt;标题1&lt;&#x2F;RenderVue&gt;
    &lt;RenderVue level&#x3D;&quot;2&quot;&gt;标题2&lt;&#x2F;RenderVue&gt;
    &lt;RenderVue level&#x3D;&quot;3&quot;&gt;标题3&lt;&#x2F;RenderVue&gt;
    &lt;RenderVue level&#x3D;&quot;4&quot;&gt;标题4&lt;&#x2F;RenderVue&gt;
&lt;&#x2F;div&gt;

&#x2F;&#x2F; 子组件中
&lt;script&gt;
export default &#123;
  props: &#123;
    level: &#123;
      type: String,
    &#125;
  &#125;,
  render(createElement) &#123;
    return createElement(&#39;h&#39; + this.level,this.$slots.default)
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre></li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><code>Vue</code>文件中<code>Template</code>最终会被编译成<code>render</code>函数的形式</li>
<li><code>Vue</code>文件中若写了<code>&lt;template&gt;&lt;/template&gt;</code> <code>render</code>函数会变的无效</li>
</ul>
<h4 id="引用地址"><a href="#引用地址" class="headerlink" title="引用地址"></a>引用地址</h4><blockquote>
<ul>
<li><a href="https://blog.csdn.net/weixin_43974265/article/details/112747768">https://blog.csdn.net/weixin_43974265/article/details/112747768</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>render vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习 --- 插槽</title>
    <url>/2022/05/13/Vue/Slot/</url>
    <content><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>具名插槽</p>
<blockquote>
<p>可以通过name属性给插槽绑定名称，从而达到预期想要渲染的位置</p>
</blockquote>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;solt name&#x3D;&#39;header&#39;&gt;
 	&#x2F;&#x2F; 此处可以写一些默认内容（后备内容）
&lt;&#x2F;slot&gt;</code></pre>

<p>使用时可以通过<code>v-solt:header</code>或者<code>#header</code>，<code>#</code>和<code>v-solt:</code>功能类似</p>
<blockquote>
<p> 注意：<code>#</code>后必须有名字</p>
</blockquote>
<ul>
<li><p>不设置名称则默认插槽名称为<code>default</code>（默认的具名插槽）</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">① &lt;solt name&#x3D;&#39;default&#39;&gt;&lt;&#x2F;solt&gt;
② &lt;solt&gt;&lt;&#x2F;solt&gt;
①和②是一样的作用</code></pre>
</li>
<li><p>自定义设置插槽名称（自定义名称的插槽）</p>
</li>
</ul>
</li>
<li><p>作用域插槽</p>
<blockquote>
<p>提供一种方式，使得插槽能够访问子组件中数据的插槽。通过在子组件中绑定值以供插槽中使用</p>
</blockquote>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 子组件中：
&lt;solt :propName&#x3D;&quot;user&quot;&gt;&lt;&#x2F;solt&gt;
let user &#x3D; &#123;
	name: &#39;yanghong&#39;,
	age: 18
&#125;
&#x2F;&#x2F; 调用：
&lt;template #default&#x3D;&quot;&#123;propName&#125;&quot;&gt;
	&lt;span&gt;&#123;&#123;&#125;&#125;&lt;&#x2F;span&gt;
&lt;&#x2F;template&gt;</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue slot</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习 --- 策略模式</title>
    <url>/2022/05/22/DesignPattern/StrategyPattern/</url>
    <content><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>定义一系列的算法，  把他们一个一个的封装起来，并使得他们可以进行相互替换。</p>
<p>一个基于策略模式的程序至少由两部分组成。</p>
<ul>
<li>第一个部分是：一组策略类，策略类封装了具体的算法，并负责具体的计算过程。</li>
<li>第二个部分是：环境类，接受客户的请求，随后把请求委托给某一个策略类。</li>
</ul>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传统写法</span>
<span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">level<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 策略类写法</span>
<span class="token comment">// 策略类算法封装</span>
<span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">S</span><span class="token operator">:</span> <span class="token parameter">salary</span> <span class="token operator">=></span> <span class="token number">4</span> <span class="token operator">*</span> salary<span class="token punctuation">,</span>
    <span class="token function-variable function">A</span><span class="token operator">:</span> <span class="token parameter">salary</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> salary<span class="token punctuation">,</span>
    <span class="token function-variable function">B</span><span class="token operator">:</span> <span class="token parameter">salary</span> <span class="token operator">=></span> <span class="token number">2</span> <span class="token operator">*</span> salary<span class="token punctuation">,</span>
    <span class="token function-variable function">C</span><span class="token operator">:</span> <span class="token parameter">salary</span> <span class="token operator">=></span> salary<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 环境类</span>
<span class="token keyword">function</span> <span class="token function">getBouns</span> <span class="token punctuation">(</span><span class="token parameter">level<span class="token punctuation">,</span>salary</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>



<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><blockquote>
<p>可以使得项目的一个可维护度和代码的整洁度得到一个大幅度的提升</p>
</blockquote>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习 --- 观察者模式</title>
    <url>/2022/05/22/DesignPattern/ObservePattern/</url>
    <content><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>观察者（<code>Observer</code>）直接订阅（<code>Subscribe</code>）主题（<code>Subject</code>），而当主题被激活的时候，会触发（<code>FireEvent</code>）观察者里的事件。</p>
</blockquote>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><blockquote>
<p>思想：</p>
<ol>
<li>观察者中必须要有一个事件，用于主题变化时触发。</li>
<li>主题中：<ul>
<li>一个状态存储，保存当前的主题状态用于辨别主题是否发生变化</li>
<li>一个修改状态的事件</li>
<li>一个用于存储观察者的变量</li>
<li>给主题添加和删除观察者的方法</li>
<li>通知函数，通知观察者，主题发生了变化</li>
</ul>
</li>
</ol>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 观察者</span>
<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">&#125;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">: 主题发生变化!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//  主题</span>
<span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 当前主题的状态</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 保存观察者信息的数组</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 用于改变主题状态的方法</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 用于给当前主题实例添加观察者</span>
    <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">!==</span> observer<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 用于给当前主题实例删除观察者</span>
    <span class="token function">deleteObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">!==</span> observer<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 通知观察者的函数</span>
    <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            item<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><blockquote>
<p>关联行为 场景 , 建立一套 触发机制 ;</p>
<p><strong>如 :</strong> 用户关注某个商品的价格 , 降价时进行通知 , 这样 用户 和 商品 产生了关联 , 触发机制就是 商品降价 。</p>
</blockquote>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>observe 观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习 --- 工厂模式</title>
    <url>/2022/05/29/DesignPattern/FactoryPattern/</url>
    <content><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<ul>
<li>工厂模式是最常用的实例化对象模式，是用工厂方法代替new操作的一种模式，工厂模式适用与一个方法根据参数不同，创建不同的实例对象。不需要关心具体操作的逻辑，只关心执行哪个操作即可。</li>
<li>工厂模式分为三种： 简单工厂、工厂方法、抽象工厂</li>
</ul>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote>
<p>介绍：只做一个弹窗，根据点击不同的按钮，实现不同的弹窗样式</p>
</blockquote>
<ol>
<li><p>弹窗<code>html</code>代码</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>factory-pattern<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
        <span class="token selector">.modal</span><span class="token punctuation">&#123;</span>
            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 3px 5px #999<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> -250px 0 0 -250px<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.modal header</span><span class="token punctuation">&#123;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.modal.success header</span><span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.modal.warning header</span><span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.modal.error header</span><span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>S<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>W<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>失败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>引入的<code>js</code>代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>   
    <span class="token keyword">let</span> oModal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'modal'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 获取弹窗的DOM元素</span>
    <span class="token keyword">let</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'btn-group'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 获取按钮组的DOM元素</span>
    <span class="token keyword">let</span> <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 绑定监听事件</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 监听事件</span>
    <span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleBtnClick<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">// 处理按钮点击</span>
    <span class="token keyword">function</span> <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> tar <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">let</span> tag <span class="token operator">=</span> tar<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> status <span class="token operator">=</span> tar<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>status<span class="token punctuation">;</span> <span class="token comment">// 获取点击状态--区分点击的哪种按钮  S、W、E  三中状态</span>
            <span class="token function">statusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>   <span class="token comment">// 执行状态切换</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 状态切换---className切换  实现不同风格弹窗切换</span>
    <span class="token keyword">function</span> <span class="token function">statusChange</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> className <span class="token operator">=</span> <span class="token string">'modal'</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
                className <span class="token operator">+=</span> <span class="token string">' success'</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
                className <span class="token operator">+=</span> <span class="token string">' warning'</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
                className <span class="token operator">+=</span> <span class="token string">' error'</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        oModal<span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>步骤1和步骤2很好的实现了点击切换弹窗的功能，也极大程度上实现了程序的内聚。但是最严重的问题在于<code>statusChange</code>方法上，该方法把逻辑和功能全写在一起，新增需求时，只能在statusChange中继续书写，从而使得该方法愈加臃肿。故有以下思路：</p>
<blockquote>
<ol>
<li>传入当前状态status，根据不同状态执行不同的创建弹窗方法，这样如若不同弹窗有不同需求，只需在各自的方法上追加功能即可</li>
<li>相同的功能可以提取出来放在父类上</li>
<li>不同状态的类继承该父类，又可各自拥有自己独特的方法</li>
<li>在<code>index.js</code>中，可以引入专门创建的方法，传入当前的<code>DOM</code>和<code>status</code></li>
</ol>
</blockquote>
</li>
<li><p>修改后的<code>index.js</code>文件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Factory <span class="token keyword">from</span> <span class="token string">'./factory-create.js'</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> oModal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'modal'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'btn-group'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span>oModal<span class="token punctuation">)</span> <span class="token comment">// 传入当前的DOM元素给工厂函数</span>
    <span class="token keyword">let</span> <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleBtnClick<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> tar <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">let</span> tag <span class="token operator">=</span> tar<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> status <span class="token operator">=</span> tar<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>status<span class="token punctuation">;</span>
            <span class="token keyword">let</span> a <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span><span class="token string">'弹窗'</span><span class="token punctuation">)</span> <span class="token comment">// 工厂类的实例上希望有一个专门用于创建的函数（create），传入状态status和自定义内容</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>


</li>
<li><p><code>factory-create.js</code>文件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 1. 不同状态的弹窗都有的 --- 公共的方法或者属性(都接收一个status状态值)
 *
 * 2. 不同状态的弹窗 内部属性的加工和功能扩展 Success，Warning，Error
 *
 * 3. 通过传入的状态，自动实例化相应的类
 */</span>

<span class="token comment">// Modal 为公共的父类，接收一个状态，并把其放置用它创建的实例上</span>
<span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status
    <span class="token punctuation">&#125;</span>
	
    <span class="token comment">// get 类似于Object.defineProperty中的get</span>
    <span class="token comment">// 拦截，当访问实例上的className时，会执行以下内容（根据实例状态，返回不同的类名）</span>
    <span class="token keyword">get</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> classStr <span class="token operator">=</span> <span class="token string">'modal'</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' success'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' warning'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' error'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> classStr
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 成功类型弹窗</span>
<span class="token keyword">class</span> <span class="token class-name">SuccessModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 告警类型弹窗</span>
<span class="token keyword">class</span> <span class="token class-name">WarningModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 失败类型弹窗</span>
<span class="token keyword">class</span> <span class="token class-name">ErrorModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 工厂函数</span>
<span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom
    <span class="token punctuation">&#125;</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">;</span>
        <span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WarningModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        dom<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> modal<span class="token punctuation">.</span>title<span class="token punctuation">;</span>
        dom<span class="token punctuation">.</span>className <span class="token operator">=</span> modal<span class="token punctuation">.</span>className<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Factory</code></pre>


</li>
<li><p>工厂函数<code>Factory</code>接收一个<code>DOM</code>元素，内有一个create方法，create方法接收一个状态，用于创建不同的弹窗，虽然内部也是Switch分支语句，但此处分支语句只是用来实例化不同的弹窗类，具体的新需求的增加或修改，可以直接在弹窗类中实现。如新增需求：错误弹窗在控制台输出错误信息</p>
</li>
<li><p>下面只把不同部分展示</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 1. 不同状态的弹窗都有的 --- 公共的方法或者属性(都接收一个status状态值)
 *
 * 2. 不同状态的弹窗 内部属性的加工和功能扩展 Success，Warning，Error
 *
 * 3. 通过传入的状态，自动实例化相应的类
 */</span>

<span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">get</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> classStr <span class="token operator">=</span> <span class="token string">'modal'</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' success'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' warning'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
                classStr <span class="token operator">+=</span> <span class="token string">' error'</span>
                <span class="token keyword">break</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> classStr
    <span class="token punctuation">&#125;</span>
	<span class="token comment">// 1. 新增输出方法</span>
    <span class="token keyword">static</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">ErrorModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">// 2. 错误的弹窗中定义方法，并调用父类的输出方法 </span>
    <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Modal<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">'错误提示：'</span><span class="token operator">+</span> info<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom
    <span class="token punctuation">&#125;</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">;</span>
        <span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WarningModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
                modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        dom<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> modal<span class="token punctuation">.</span>title<span class="token punctuation">;</span>
        dom<span class="token punctuation">.</span>className <span class="token operator">=</span> modal<span class="token punctuation">.</span>className<span class="token punctuation">;</span>
        <span class="token comment">// 3. 此处把定义的方法返回出去即可</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">handleErrorTip</span><span class="token operator">:</span> modal<span class="token punctuation">.</span>output
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Factory</code></pre>


</li>
<li><p>上面代码把这种创建过程交给特定的方法的一种实现就是工厂模式，上面只是一种最简单的工厂模式。</p>
</li>
<li><p>Switch分支语句中根据字母去维护，显然是不利的。根据策略模式—策略类和环境类，可以对如上Switch分支语句进行优化：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 1. 不同状态的弹窗都有的 --- 公共的方法或者属性(都接收一个status状态值)
 *
 * 2. 不同状态的弹窗 内部属性的加工和功能扩展 Success，Warning，Error
 *
 * 3. 通过传入的状态，自动实例化相应的类
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">get</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> statusMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">static</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">SuccessModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">WarningModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ErrorModal</span> <span class="token keyword">extends</span> <span class="token class-name">Modal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Modal<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">'错误提示：'</span><span class="token operator">+</span> info<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom
    <span class="token punctuation">&#125;</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">;</span>
        <span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">statusMap</span><span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dom<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> modal<span class="token punctuation">.</span>title<span class="token punctuation">;</span>
        dom<span class="token punctuation">.</span>className <span class="token operator">=</span> modal<span class="token punctuation">.</span>className<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">handleErrorTip</span><span class="token operator">:</span> modal<span class="token punctuation">.</span>output
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Factory

<span class="token keyword">const</span> statusMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'S'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'modal success'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">instance</span><span class="token operator">:</span> SuccessModal<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'W'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'modal warning'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">instance</span><span class="token operator">:</span> WarningModal<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'E'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'modal error'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">instance</span><span class="token operator">:</span> ErrorModal<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>策略类<code>statusMap</code>，定义了不同状态下的策略（<code>className</code>，<code>instance</code>),这样即使状态发生改变，也只需要更改策略类就可完成相应改变。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 数据类型</title>
    <url>/2022/06/03/JavaScript/DataType/</url>
    <content><![CDATA[<h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><ol>
<li>基本数据类型：<code>String</code>,<code>Number</code>,<code>Boolean</code>,<code>undefined</code>,<code>null</code>,<code>Symbol(es6)</code>，<code>BigInt(es10)</code></li>
<li>引用数据类型：<code>Object,Array</code>,<code>Function</code>,<code>Date</code>,<code>RegExp</code>,<code>Error</code>,<code>Set</code>,<code>Map</code>,<code>Math</code></li>
</ol>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>基本类型的数据都是按值传递，引用类型的数据都是按照引用（内存地址）传递，基本类型数据存储在栈内存中，引用类型数据存储在堆内存中，在栈内存中存储的仅是引用类型数据的引用地址</p>
<p><a href="https://imgtu.com/i/XUQqvd"><img src="https://s1.ax1x.com/2022/06/03/XUQqvd.png" alt="图解"></a></p>
<h4 id="数据类型的检测方式"><a href="#数据类型的检测方式" class="headerlink" title="数据类型的检测方式"></a>数据类型的检测方式</h4><blockquote>
<ul>
<li><code>typeof</code></li>
<li><code>instanceof</code></li>
<li><code>constructor</code></li>
<li><code>Object.prototype.toString</code></li>
</ul>
</blockquote>
<h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">''</span> 			<span class="token comment">// 'string'</span>
<span class="token keyword">typeof</span> <span class="token number">1</span> 			<span class="token comment">// 'number'</span>
<span class="token keyword">typeof</span> <span class="token boolean">false</span> 		<span class="token comment">//'boolean'</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> 		<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> 	<span class="token comment">// 'undefined'</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> 	<span class="token comment">// 'symbol'</span>
<span class="token keyword">typeof</span> <span class="token number">10n</span> 			<span class="token comment">// 'bigint'</span>

<span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 			<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 			<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token operator">/</span>s<span class="token operator">/</span>g 		<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 'function'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 'object' </span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 'object'</span></code></pre>

<blockquote>
<p><code>typeof</code>能检测的类型</p>
<ul>
<li>基本类型中除了<code>null</code>以外的所有类型</li>
<li>引用类型中只能判断 <code>function</code>类型</li>
</ul>
</blockquote>
<h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><code>instanceof</code></h5><blockquote>
<p><code>instanceof</code> 是通过检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上，达到检测目的。</p>
<p>故：<code>instanceof</code>无法检测基本数据类型，但由于原型可能会被修改，所以通过原型的方式去检测不够安全。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>				<span class="token comment">// 'true'</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>				<span class="token comment">// 'true'</span>
<span class="token operator">/</span>s<span class="token operator">/</span>g <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">;</span>				<span class="token comment">// 'true'</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">;</span> <span class="token comment">// 'true'</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span> 		<span class="token comment">// 'true' </span>
<span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">;</span> 			<span class="token comment">// 'true'</span>
<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">;</span> 			<span class="token comment">// 'true'</span>
<span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">;</span> 		<span class="token comment">// 'true'</span></code></pre>

<h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h5><blockquote>
<p><code>constructor</code> 是通过获取构造函数的方式检测数据类型</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基本类型</span>
<span class="token string">''</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String 			<span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean <span class="token comment">// true</span>
<span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Symbol <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token number">10n</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> BigInt <span class="token comment">// true</span>

<span class="token comment">// 引用类型</span>
<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array
<span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2020'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Set <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Map <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Error <span class="token comment">// true</span></code></pre>

<h5 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a><code>Object.prototype.toString.call</code></h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基本类型</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> 			<span class="token comment">// '[object String]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Null]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> 	<span class="token comment">// '[object Undefined]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 			<span class="token comment">// '[object Number]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Number]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Boolean]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">10n</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object BigInt]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 	<span class="token comment">// '[object Symbol]'</span>

<span class="token comment">// 引用类型</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 				<span class="token comment">// '[object Object]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 				<span class="token comment">// '[object Array]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> 			<span class="token comment">// '[object RegExp]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Date]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span> 			<span class="token comment">// '[object Math]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 	<span class="token comment">// '[object Function]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Map]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 		<span class="token comment">// '[object Set]'</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 	<span class="token comment">// '[object Error]'</span></code></pre>



<blockquote>
<p>文章出处：<a href="https://www.bilibili.com/video/BV1Eh411s72a?spm_id_from=333.337.search-card.all.click">哔哩哔哩视频</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 原型和原型链</title>
    <url>/2022/06/03/JavaScript/Prototype/</url>
    <content><![CDATA[<h4 id="相关名称"><a href="#相关名称" class="headerlink" title="相关名称"></a>相关名称</h4><blockquote>
<ul>
<li><code>prototype</code>: 原型</li>
<li><code>__proto__</code>:  原型链（链接点）,<strong>原型链是由<code>__proto__</code>连接起来的‘链条’</strong></li>
</ul>
</blockquote>
<h4 id="从属关系"><a href="#从属关系" class="headerlink" title="从属关系"></a>从属关系</h4><blockquote>
<p><code>prototype</code>  —&gt; 函数的一个属性：就是一个普通对象{}</p>
<p><code>__proto__</code>—&gt; 对象<code>Object</code>的一个属性： 对象{}</p>
<p>对象的<code>__proto__</code>保存着该对象的构造函数的<code>prototype</code></p>
</blockquote>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><blockquote>
<ul>
<li>实例的<code>__proto__</code> 和 构造函数的<code>prototype</code>是全等的</li>
<li>构造函数的<code>prototype</code>的<code>__proto__</code>和<code>Object.prototype</code>是全等的。</li>
<li><code>Object.prototype.__proto__</code>  的返回值是null</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>ts学习 --- 介绍</title>
    <url>/2022/06/08/TypeScript/Introduce/</url>
    <content><![CDATA[<h4 id="TypeScript是什么"><a href="#TypeScript是什么" class="headerlink" title="TypeScript是什么"></a><code>TypeScript</code>是什么</h4><blockquote>
<ul>
<li><code>TypeScript </code>是<code>JavaScript</code>的超集</li>
<li>在<code>JS</code>基础之上，为<code>JS</code>添加了类型支持</li>
<li><code>TS</code>是静态型编程语言（编译期做类型检查），<code>JS</code>是动态型编程语言（执行期）做类型检查。</li>
</ul>
</blockquote>
<pre class="language-none"><code class="language-none">let age:number &#x3D; 18</code></pre>

<h4 id="TypeScript-为什么要添加类型支持"><a href="#TypeScript-为什么要添加类型支持" class="headerlink" title="TypeScript 为什么要添加类型支持"></a><code>TypeScript</code> 为什么要添加类型支持</h4><blockquote>
<p><code>JS</code>的类型系统存在‘先天缺陷’，<code>JS</code>代码中绝大部分错误都是类型错误，影响开发效率。</p>
</blockquote>
<h4 id="TypeScript的优势"><a href="#TypeScript的优势" class="headerlink" title="TypeScript的优势"></a><code>TypeScript</code>的优势</h4><blockquote>
<ul>
<li><p>更早的发现错误，减少程序出错概率，提升开发效率</p>
</li>
<li><p>强大的类型系统提升了代码的可维护性，使得重构代码更加的容易</p>
</li>
<li><p>支持最新的<code>ECMAScript</code>语法，优先体验最新的语法</p>
</li>
<li><p>TS类型推断机制</p>
</li>
<li><p><code>Vue3</code>源码使用<code>TS</code>重写，<code>Angular</code>默认支持<code>TS</code>，<code>React</code>与<code>TS</code>完美配合，<code>TypeScript</code>已成为中大型前端项目的首先编程语言</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>ts学习 --- 基本类型</title>
    <url>/2022/06/09/TypeScript/BasicType/</url>
    <content><![CDATA[<h4 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h4><blockquote>
<p>定义变量、函数参数，函数返回值等的数据类型</p>
</blockquote>
<h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5><pre class="language-none"><code class="language-none">let isDone: boolean &#x3D; false;
isDone &#x3D; 5; &#x2F;&#x2F; Type &#39;number&#39; is not assignable to type &#39;boolean&#39;.</code></pre>

<h5 id="number"><a href="#number" class="headerlink" title="number"></a>number</h5><pre class="language-none"><code class="language-none">let num:number &#x3D; 10;
num &#x3D; true; &#x2F;&#x2F; Type &#39;boolean&#39; is not assignable to type &#39;number&#39;</code></pre>

<h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><pre class="language-none"><code class="language-none">let name:string &#x3D; &#39;yanghong&#39;;</code></pre>

<h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><pre class="language-none"><code class="language-none">let undef:undefined &#x3D; undefined;</code></pre>

<h5 id="null"><a href="#null" class="headerlink" title="null"></a>null</h5><pre class="language-none"><code class="language-none">let nullVal:null &#x3D; null;</code></pre>

<h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><pre class="language-none"><code class="language-none">let arr:Array &#x3D; [];
let arr:number[] &#x3D; [1,2,3];
let arr:Array&lt;number&gt; &#x3D; [1,2,3]</code></pre>

<h5 id="object"><a href="#object" class="headerlink" title="object"></a>object</h5><pre class="language-none"><code class="language-none">let obj:object &#x3D; &#123;&#125;;
obj &#x3D; null;
obj &#x3D; &#123;name:&#39;yanghong&#39;&#125;</code></pre>

<h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><blockquote>
<p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p>
</blockquote>
<pre class="language-none"><code class="language-none">let x: [string,number] &#x3D; [&#39;yanghong&#39;,1];</code></pre>

<h5 id="any"><a href="#any" class="headerlink" title="any"></a>any</h5><blockquote>
<p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这种情况下，我们可以使用 <code>any</code>类型来标记这些变量：</p>
</blockquote>
<pre class="language-none"><code class="language-none">let notSure:any &#x3D; 4;
notSure &#x3D; &#39;yanghong&#39;;
notSure &#x3D; true;</code></pre>

<h5 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h5><blockquote>
<p>简言之：告诉编译器，我知道自己是什么类型，也知道自己在干什么。有两种方式</p>
<ul>
<li><type> value</li>
<li>value as type</li>
</ul>
</blockquote>
<pre class="language-none"><code class="language-none">let someValue: any &#x3D; &#39;yanghong&#39;;
let strLength: number &#x3D; (&lt;string&gt;someValue).length;
&#x2F;&#x2F; 或者
strLength: number &#x3D; (someValue as string).length;</code></pre>

<h5 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h5><blockquote>
<p>根据变量初次定义时的类型。若定义未赋值，则类型为any类型</p>
</blockquote>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>ts学习 --- 接口</title>
    <url>/2022/06/11/TypeScript/Interface/</url>
    <content><![CDATA[<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote>
<p><code>TypeScript</code>的核心原则之一就是对值具有的结构进行类型检查。接口的作用就是为这些类型命名和为你的代码定义’契约’或者可以理解为自定义的类型</p>
</blockquote>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><h5 id="1-普通用法"><a href="#1-普通用法" class="headerlink" title="1. 普通用法"></a>1. 普通用法</h5><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个Info接口，所有Info类型的变量必须有name:string,age:number两个属性
interface Info &#123;
    name: string;
    age: number;
&#125;</code></pre>

<h5 id="2-可选属性"><a href="#2-可选属性" class="headerlink" title="2. 可选属性"></a>2. 可选属性</h5><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个接口，其中name和age均为可选属性
interface Info &#123;
    name?: string;
    age?: number;
&#125;</code></pre>

<h5 id="3-只读属性"><a href="#3-只读属性" class="headerlink" title="3. 只读属性"></a>3. 只读属性</h5><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个接口，其中name和age均为只读属性
&#x2F;&#x2F; 赋值后不可再修改
interface Info &#123;
    readonly name: string;
    readonly age: number;
&#125;
let info:Info &#x3D; &#123;name: &#39;yanghong&#39;,age: 18&#125;
info.age &#x3D; 19 &#x2F;&#x2F;error!!!</code></pre>

<h5 id="4-函数类型"><a href="#4-函数类型" class="headerlink" title="4. 函数类型"></a>4. 函数类型</h5><blockquote>
<p>通过接口的方式作为函数的类型来使用，为了使用接口表示函数类型，我们需要给接口定义一个<strong>调用签名</strong></p>
<blockquote>
<p>调用签名：就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要有类型</p>
</blockquote>
</blockquote>
<pre class="language-none"><code class="language-none">interface IsEqual &#123;
	(a:number,b:number):boolean
&#125;
const isEqual:IsEqual &#x3D; function(a:number,b:number):boolean&#123;
    return a&#x3D;&#x3D;&#x3D;b
&#125;</code></pre>

<h5 id="5-类类型"><a href="#5-类类型" class="headerlink" title="5. 类类型"></a>5. 类类型</h5><blockquote>
<p>类的类型也可以通过接口来实现</p>
</blockquote>
<pre class="language-none"><code class="language-none">interface SayName &#123;
	sayName()
&#125;
interface SayAge &#123;
	sayAge()
&#125;
class Info implements SayName,SayAge &#123;
	sayName() &#123;
		console.log(&#39;yh&#39;)
	&#125;,
    sayAge() &#123;
        console.log(18)
    &#125;
&#125;</code></pre>

<h5 id="6-接口继承"><a href="#6-接口继承" class="headerlink" title="6. 接口继承"></a>6. 接口继承</h5><blockquote>
<p>接口可以继承，类似于类的继承</p>
</blockquote>
<pre class="language-none"><code class="language-none">interface SayName &#123;
	sayName()
&#125;
interface SayAge &#123;
	sayAge()
&#125;
interface SayAll extents SayName,SayAge&#123;&#125;

class Info implements SayAll &#123;
    sayName() &#123;
		console.log(&#39;yh&#39;)
	&#125;,
    sayAge() &#123;
        console.log(18)
    &#125;
&#125;</code></pre>

<blockquote>
<p>接口和接口之间叫继承（extends），类和接口之间是实现（implements）</p>
</blockquote>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui --- DatePicker</title>
    <url>/2022/06/12/Element/DatePicker/</url>
    <content><![CDATA[<h4 id="ElementUI-—-DatePicker"><a href="#ElementUI-—-DatePicker" class="headerlink" title="ElementUI — DatePicker"></a>ElementUI — DatePicker</h4><blockquote>
<p>前言：在使用<code>element-ui</code>的日期选择器的过程中，经常会有设置选择日期的范围的需求。</p>
</blockquote>
<h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><blockquote>
<p>通过向<code>picker-options</code>中传入<code>disabledDate</code>函数的方式可以实现禁用效果</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">pickOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token function">disabledDate</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 根据time.getTime()获取展示的每个日期的时间戳</span>
        <span class="token comment">// 2. 获取当前日期的时间戳</span>
        <span class="token comment">// 3. 进行比较，返回结果</span>
        <span class="token keyword">return</span> <span class="token comment">// 返回true/false</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>每次都需要去单独写逻辑，很容易出错，所以做了极简的封装,接收四个参数：</p>
<ul>
<li><code>time</code>：<code>disabledDate</code>函数提供的参数。必须</li>
<li><code>type</code>: <code>String</code>类型，<code>before</code>&#x2F;<code>after</code>,表示禁用今日之前的日期还是禁用今日之后的日期。默认：<code>before</code></li>
<li><code>disabledCurrent</code>：<code>Boolean</code>类型，表示是否禁用当前日期<code>divideDate</code>传入或者当前日期（默认）。默认：<code>true</code></li>
<li><code>divideDate</code>：<code>String</code> 类型，以<code>-</code>相连。分割日期，以哪一天的日期进行分割。默认当天。如：<code>2022-06-12</code></li>
</ul>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 禁用函数封装</span>
<span class="token keyword">function</span> <span class="token function">toDisabled</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">'before'</span><span class="token punctuation">,</span> disabledCurrent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> divideDate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> errorTip <span class="token operator">=</span> <span class="token string">'参数传入错误，期望得到：'</span>
  <span class="token comment">// 当前type的可选项</span>
  <span class="token keyword">const</span> typeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'before'</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> checkParams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'disabledCurrent'</span><span class="token punctuation">,</span> <span class="token string">'divideDate'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> checkMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'time'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'time'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">check</span><span class="token operator">:</span> checkTime<span class="token punctuation">,</span>
      <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token string">'Date'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'type'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'type'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">check</span><span class="token operator">:</span> checkType<span class="token punctuation">,</span>
      <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token string">'before or after'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'disabledCurrent'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'disabledCurrent'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">check</span><span class="token operator">:</span> checkDisabledCurrent<span class="token punctuation">,</span>
      <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token string">'Boolean'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'divideDate'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'divideDate'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">check</span><span class="token operator">:</span> checkDivideDate<span class="token punctuation">,</span>
      <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token string">'YYYY-MM-DD'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取当前日期对象</span>
  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取当前日期的时间戳</span>
  <span class="token keyword">const</span> newDividerDate <span class="token operator">=</span> divideDate <span class="token operator">?</span> divideDate <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>newDividerDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> returnMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'before'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token boolean">true</span><span class="token operator">:</span> newTime <span class="token operator">&lt;=</span> currentDate<span class="token punctuation">,</span>
      <span class="token boolean">false</span><span class="token operator">:</span> newTime <span class="token operator">&lt;</span> currentDate
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'after'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token boolean">true</span><span class="token operator">:</span> newTime <span class="token operator">>=</span> currentDate<span class="token punctuation">,</span>
      <span class="token boolean">false</span><span class="token operator">:</span> newTime <span class="token operator">></span> currentDate
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 检查传入的参数 --- type</span>
  <span class="token keyword">function</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> typeList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 检查传入的参数 --- disabledCurrent</span>
  <span class="token keyword">function</span> <span class="token function">checkDisabledCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>disabledCurrent<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'boolean'</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 检查传入的参数 --- divideDate</span>
  <span class="token keyword">function</span> <span class="token function">checkDivideDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$</span><span class="token regex-delimiter">/</span></span>
    <span class="token keyword">return</span> Reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>divideDate<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>divideDate <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 检查传入的参数 --- time</span>
  <span class="token keyword">function</span> <span class="token function">checkTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Date]'</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 所有的检查项</span>
  <span class="token keyword">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> checkParams<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>checkMap<span class="token punctuation">[</span>checkParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>checkMap<span class="token punctuation">[</span>checkParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> errorTip <span class="token operator">+</span> checkMap<span class="token punctuation">[</span>checkParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>expect<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> returnMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> returnMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>disabledCurrent<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>使用</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">pickerOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token function">disabledDate</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token function">toDisabled</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'2022-07-13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>ElementUi</category>
      </categories>
      <tags>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 事件循环机制</title>
    <url>/2022/06/11/JavaScript/EventLoop/</url>
    <content><![CDATA[<h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><blockquote>
<ul>
<li><p><code>js</code>是单线程运行的，每次只能执行一个任务，排队执行。任务分为同步和异步。异步任务永远在同步任务执行完成之后才执行。异步需要基于回调来实现，<code>eventloop</code>就是异步回调的实现原理。</p>
</li>
<li><p><code>js</code>中代码分为同步和异步,异步包含微任务和宏任务。区别如下：</p>
<p><a href="https://imgtu.com/i/XgsCzn"><img src="https://s1.ax1x.com/2022/06/12/XgsCzn.png" alt="宏任务和微任务"></a></p>
</li>
</ul>
</blockquote>
<h5 id="调用栈（CallStack）"><a href="#调用栈（CallStack）" class="headerlink" title="调用栈（CallStack）"></a>调用栈（<code>CallStack</code>）</h5><blockquote>
<p>调用栈是一种栈结构（先进后出）当一段<code>js</code>语句执行时，<code>js</code>引擎会将同步代码按照顺序依次压入调用栈中，然后从头开始执行。</p>
</blockquote>
<h5 id="事件队列（TaskQueue）"><a href="#事件队列（TaskQueue）" class="headerlink" title="事件队列（TaskQueue）"></a>事件队列（<code>TaskQueue</code>）</h5><blockquote>
<p>其是一个队列（先进先出），存放异步任务（宏任务队列和微任务队列）</p>
</blockquote>
<h5 id="JavaScript执行顺序"><a href="#JavaScript执行顺序" class="headerlink" title="JavaScript执行顺序"></a>JavaScript执行顺序</h5><blockquote>
<ol>
<li>代码执行，将同步任务压入调用栈中。</li>
<li>异步任务暂时放入<code>webcore</code>(根据浏览器而来，<code>-webkit-</code>）中。</li>
<li>等到异步任务时机到达时（定时器事件到达，或者请求返回等），将异步任务放入事件队列中去。而异步任务又分为宏任务和微任务，所以事件队列中又有宏队列和微队列，分别存储宏任务和微任务。</li>
<li>调用栈中代码执行，直至执行完毕</li>
<li>检查是否有微任务要执行。执行微任务队列中的任务，将微任务队列中的事件放入调用栈中去执行。</li>
<li>当调用栈中无要执行程序时，检查是否有DOM渲染操作，尝试渲染DOM</li>
<li>检查是否有宏任务需要执行。执行宏任务队列中的任务。</li>
<li>操作4，5，6，7依次次循环执行….</li>
</ol>
</blockquote>
<p><a href="https://imgtu.com/i/XgyWND"><img src="https://s1.ax1x.com/2022/06/12/XgyWND.png" alt="事件循环"></a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>事件循环</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习 --- 正则表达式</title>
    <url>/2022/06/13/JavaScript/Reg/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
</search>
